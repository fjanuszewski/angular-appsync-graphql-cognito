// tslint:disable
/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
// tslint:enable
import { Component, Input, Output, EventEmitter, Inject, } from '@angular/core';
import { AmplifyService } from '../../../providers/amplify.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function PhotoPickerComponentCore_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 10);
} }
function PhotoPickerComponentCore_img_6_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "img", 11);
    ɵngcc0.ɵɵlistener("error", function PhotoPickerComponentCore_img_6_Template_img_error_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onPhotoError(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("src", ctx_r1.photoUrl, ɵngcc0.ɵɵsanitizeUrl);
} }
function PhotoPickerComponentCore_button_9_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 12);
    ɵngcc0.ɵɵlistener("click", function PhotoPickerComponentCore_button_9_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); var ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.uploadFile(); });
    ɵngcc0.ɵɵtext(1, " Upload Photo ");
    ɵngcc0.ɵɵelementEnd();
} }
function PhotoPickerComponentCore_div_10_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "div", 14);
    ɵngcc0.ɵɵelementStart(2, "span", 15);
    ɵngcc0.ɵɵtext(3, "\u26A0");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 16);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "a", 17);
    ɵngcc0.ɵɵlistener("click", function PhotoPickerComponentCore_div_10_Template_a_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onAlertClose(); });
    ɵngcc0.ɵɵtext(7, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.errorMessage);
} }
var template = "\n<div class=\"amplify-photo-picker\">\n<div class=\"amplify-photo-picker-container\">\n  <div class=\"amplify-form-header\">Select Photos</div>\n  <div class=\"amplify-photo-picker-upload\" *ngIf=\"!hasPhoto\"></div>\n  <div class=\"amplify-photo-picker-preview\">\n    <img\n      class=\"amplify-photo-picker-preview\"\n      src=\"{{photoUrl}}\"\n      *ngIf=\"hasPhoto\"\n      (error)=\"onPhotoError()\"\n    />\n  </div>\n  <div class=\"amplify-upload-input\">\n    <input type=\"file\" \n      accept=\"image/*\"\n      (change)=\"pick($event)\"/>\n      <button \n        *ngIf=\"hasPhoto\" \n        class=\"amplify-form-button amplify-upload-button\" \n        (click)=\"uploadFile()\">\n        Upload Photo\n      </button>\n  </div>\n</div>\n<div class=\"amplify-alert\" *ngIf=\"errorMessage\">\n  <div class=\"amplify-alert-body\">\n    <span class=\"amplify-alert-icon\">&#9888;</span>\n    <div class=\"amplify-alert-message\">{{ errorMessage }}</div>\n    <a class=\"amplify-alert-close\" (click)=\"onAlertClose()\">&times;</a>\n  </div>\n</div>\n</div>\n";
var PhotoPickerComponentCore = /** @class */ (function () {
    function PhotoPickerComponentCore(amplifyService) {
        this.amplifyService = amplifyService;
        this.hasPhoto = false;
        this.uploading = false;
        this.s3ImageFile = null;
        this.s3ImagePath = '';
        this._storageOptions = {};
        this.picked = new EventEmitter();
        this.loaded = new EventEmitter();
        this.uploaded = new EventEmitter();
        this.logger = this.amplifyService.logger('PhotoPickerComponent');
    }
    Object.defineProperty(PhotoPickerComponentCore.prototype, "url", {
        set: function (url) {
            this.photoUrl = url;
            this.hasPhoto = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhotoPickerComponentCore.prototype, "storageOptions", {
        set: function (storageOptions) {
            this._storageOptions = Object.assign(this._storageOptions, storageOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhotoPickerComponentCore.prototype, "path", {
        set: function (path) {
            this.s3ImagePath = path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhotoPickerComponentCore.prototype, "data", {
        set: function (data) {
            this.photoUrl = data.url;
            this.s3ImagePath = data.path;
            this._storageOptions = Object.assign(this._storageOptions, data.storageOptions);
            this.hasPhoto = true;
        },
        enumerable: true,
        configurable: true
    });
    PhotoPickerComponentCore.prototype.ngOnInit = function () {
        if (!this.amplifyService.storage()) {
            throw new Error('Storage module not registered on AmplifyService provider');
        }
    };
    PhotoPickerComponentCore.prototype.pick = function (evt) {
        var file = evt.target.files[0];
        if (!file) {
            return;
        }
        if (!this._storageOptions.contentType) {
            this._storageOptions.contentType = file.type;
        }
        var name = file.name, size = file.size, type = file.type;
        this.picked.emit(file);
        this.s3ImagePath = this.s3ImagePath + "/" + file.name;
        this.s3ImageFile = file;
        var that = this;
        var reader = new FileReader();
        reader.onload = function (e) {
            var target = e.target;
            var url = target.result;
            that.photoUrl = url;
            that.hasPhoto = true;
            that.loaded.emit(url);
        };
        reader.readAsDataURL(file);
    };
    PhotoPickerComponentCore.prototype.uploadFile = function () {
        var _this = this;
        this.uploading = true;
        this.amplifyService
            .storage()
            .put(this.s3ImagePath, this.s3ImageFile, this._storageOptions)
            .then(function (result) {
            _this.uploaded.emit(result);
            _this.completeFileUpload();
        })
            .catch(function (error) {
            _this.completeFileUpload(error);
        });
    };
    PhotoPickerComponentCore.prototype.completeFileUpload = function (error) {
        if (error) {
            return this._setError(error);
        }
        this.s3ImagePath = '';
        this.photoUrl = null;
        this.s3ImageFile = null;
        this.uploading = false;
    };
    PhotoPickerComponentCore.prototype.onPhotoError = function () {
        this.hasPhoto = false;
    };
    PhotoPickerComponentCore.prototype.onAlertClose = function () {
        this._setError(null);
    };
    PhotoPickerComponentCore.prototype._setError = function (err) {
        if (!err) {
            this.errorMessage = null;
            return;
        }
        this.errorMessage = err.message || err;
    };
    /** @nocollapse */
    PhotoPickerComponentCore.ctorParameters = function () { return [
        { type: AmplifyService, decorators: [{ type: Inject, args: [AmplifyService,] },] },
    ]; };
    PhotoPickerComponentCore.propDecorators = {
        "url": [{ type: Input },],
        "storageOptions": [{ type: Input },],
        "path": [{ type: Input },],
        "data": [{ type: Input },],
        "picked": [{ type: Output },],
        "loaded": [{ type: Output },],
        "uploaded": [{ type: Output },],
    };
PhotoPickerComponentCore.ɵfac = function PhotoPickerComponentCore_Factory(t) { return new (t || PhotoPickerComponentCore)(ɵngcc0.ɵɵdirectiveInject(AmplifyService)); };
PhotoPickerComponentCore.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PhotoPickerComponentCore, selectors: [["amplify-photo-picker-core"]], inputs: { url: "url", storageOptions: "storageOptions", path: "path", data: "data" }, outputs: { picked: "picked", loaded: "loaded", uploaded: "uploaded" }, decls: 11, vars: 4, consts: [[1, "amplify-photo-picker"], [1, "amplify-photo-picker-container"], [1, "amplify-form-header"], ["class", "amplify-photo-picker-upload", 4, "ngIf"], [1, "amplify-photo-picker-preview"], ["class", "amplify-photo-picker-preview", 3, "src", "error", 4, "ngIf"], [1, "amplify-upload-input"], ["type", "file", "accept", "image/*", 3, "change"], ["class", "amplify-form-button amplify-upload-button", 3, "click", 4, "ngIf"], ["class", "amplify-alert", 4, "ngIf"], [1, "amplify-photo-picker-upload"], [1, "amplify-photo-picker-preview", 3, "src", "error"], [1, "amplify-form-button", "amplify-upload-button", 3, "click"], [1, "amplify-alert"], [1, "amplify-alert-body"], [1, "amplify-alert-icon"], [1, "amplify-alert-message"], [1, "amplify-alert-close", 3, "click"]], template: function PhotoPickerComponentCore_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtext(3, "Select Photos");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, PhotoPickerComponentCore_div_4_Template, 1, 0, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵtemplate(6, PhotoPickerComponentCore_img_6_Template, 1, 1, "img", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "div", 6);
        ɵngcc0.ɵɵelementStart(8, "input", 7);
        ɵngcc0.ɵɵlistener("change", function PhotoPickerComponentCore_Template_input_change_8_listener($event) { return ctx.pick($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, PhotoPickerComponentCore_button_9_Template, 2, 0, "button", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, PhotoPickerComponentCore_div_10_Template, 8, 1, "div", 9);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasPhoto);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasPhoto);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasPhoto);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.errorMessage);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PhotoPickerComponentCore, [{
        type: Component,
        args: [{
                selector: 'amplify-photo-picker-core',
                template: template
            }]
    }], function () { return [{ type: AmplifyService, decorators: [{
                type: Inject,
                args: [AmplifyService]
            }] }]; }, { picked: [{
            type: Output
        }], loaded: [{
            type: Output
        }], uploaded: [{
            type: Output
        }], url: [{
            type: Input
        }], storageOptions: [{
            type: Input
        }], path: [{
            type: Input
        }], data: [{
            type: Input
        }] }); })();
    return PhotoPickerComponentCore;
}());
export { PhotoPickerComponentCore };

//# sourceMappingURL=photo-picker.component.core.js.map