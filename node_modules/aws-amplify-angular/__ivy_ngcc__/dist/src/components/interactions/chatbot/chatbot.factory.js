// tslint:disable
/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
// tslint:enable
import { Component, Input, ViewChild, ComponentFactoryResolver, Output, EventEmitter, } from '@angular/core';
import { DynamicComponentDirective } from '../../../directives/dynamic.component.directive';
import { ComponentMount } from '../../component.mount';
import { ChatbotComponentIonic } from './chatbot.component.ionic';
import { ChatbotComponentCore } from './chatbot.component.core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../../directives/dynamic.component.directive';

function ChatBotComponent_ng_template_1_Template(rf, ctx) { }
var ChatBotComponent = /** @class */ (function () {
    function ChatBotComponent(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.complete = new EventEmitter();
    }
    ChatBotComponent.prototype.ngOnInit = function () {
        this.loadComponent();
    };
    ChatBotComponent.prototype.ngOnDestroy = function () { };
    ChatBotComponent.prototype.loadComponent = function () {
        var _this = this;
        var interactionParams = {
            bot: this.bot,
            title: this.title,
            clearComplete: this.clearComplete,
            conversationModeOn: this.conversationModeOn,
            voiceConfig: this.voiceConfig,
            voiceEnabled: this.voiceEnabled,
            textEnabled: this.textEnabled,
        };
        var interactionComponent = this.framework && this.framework.toLowerCase() === 'ionic'
            ? new ComponentMount(ChatbotComponentIonic, interactionParams)
            : new ComponentMount(ChatbotComponentCore, interactionParams);
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(interactionComponent.component);
        var viewContainerRef = this.componentHost.viewContainerRef;
        viewContainerRef.clear();
        var componentRef = viewContainerRef.createComponent(componentFactory);
        componentRef.instance.data = interactionComponent.data;
        componentRef.instance.complete.subscribe(function (e) {
            _this.complete.emit(e);
        });
    };
    /** @nocollapse */
    ChatBotComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver, },
    ]; };
    ChatBotComponent.propDecorators = {
        "framework": [{ type: Input },],
        "bot": [{ type: Input },],
        "title": [{ type: Input },],
        "clearComplete": [{ type: Input },],
        "conversationModeOn": [{ type: Input },],
        "voiceConfig": [{ type: Input },],
        "voiceEnabled": [{ type: Input },],
        "textEnabled": [{ type: Input },],
        "complete": [{ type: Output },],
        "componentHost": [{ type: ViewChild, args: [DynamicComponentDirective,] },],
    };
ChatBotComponent.ɵfac = function ChatBotComponent_Factory(t) { return new (t || ChatBotComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
ChatBotComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChatBotComponent, selectors: [["amplify-interactions"]], viewQuery: function ChatBotComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DynamicComponentDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.componentHost = _t.first);
    } }, inputs: { framework: "framework", bot: "bot", title: "title", clearComplete: "clearComplete", conversationModeOn: "conversationModeOn", voiceConfig: "voiceConfig", voiceEnabled: "voiceEnabled", textEnabled: "textEnabled" }, outputs: { complete: "complete" }, decls: 2, vars: 0, consts: [[1, "amplify-component"], ["component-host", ""]], template: function ChatBotComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ChatBotComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
        ɵngcc0.ɵɵelementEnd();
    } }, directives: [ɵngcc1.DynamicComponentDirective], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ChatBotComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-interactions',
                template: "\n\t\t<div class=\"amplify-component\">\n\t\t\t<ng-template component-host></ng-template>\n\t\t</div>\n\t"
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }]; }, { complete: [{
            type: Output
        }], framework: [{
            type: Input
        }], bot: [{
            type: Input
        }], title: [{
            type: Input
        }], clearComplete: [{
            type: Input
        }], conversationModeOn: [{
            type: Input
        }], voiceConfig: [{
            type: Input
        }], voiceEnabled: [{
            type: Input
        }], textEnabled: [{
            type: Input
        }], componentHost: [{
            type: ViewChild,
            args: [DynamicComponentDirective]
        }] }); })();
    return ChatBotComponent;
}());
export { ChatBotComponent };

//# sourceMappingURL=chatbot.factory.js.map