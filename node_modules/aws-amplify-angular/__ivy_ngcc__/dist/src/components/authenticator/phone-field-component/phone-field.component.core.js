// tslint:disable
/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
// tslint:enable
import { Component, Input, EventEmitter, Inject, Output, } from '@angular/core';
import { AmplifyService } from '../../../providers/amplify.service';
import { countrylist } from '../../../assets/countries';
import { auth } from '../../../assets/data-test-attributes';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';

function PhoneFieldComponentCore_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, "*");
    ɵngcc0.ɵɵelementEnd();
} }
function PhoneFieldComponentCore_option_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var country_r4 = ctx.$implicit;
    ɵngcc0.ɵɵpropertyInterpolate("value", country_r4.value);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", country_r4.label, " ");
} }
var template = "\n<div>\n    <label class=\"amplify-input-label\" for=\"localPhoneNumberField\">\n        {{ this.amplifyService.i18n().get(this._label) }}\n        <span *ngIf=\"_required\">*</span>\n    </label>\n    <div class=\"amplify-input-group\">\n        <div class=\"amplify-input-group-item\">\n            <select \n            #countryCodeField\n            name=\"countryCode\"\n            class=\"amplify-select-phone-country\"\n            [(ngModel)]=\"_country_code\"\n            (change)=\"setCountryCode($event.target.value)\"\n            data-test=\"" + auth.genericAttrs.dialCodeSelect + "\"\n            >\n            <option *ngFor=\"let country of _countries\"\n                value={{country.value}}>\n                {{country.label}}\n            </option>\n            </select>\n        </div>\n        <div class=\"amplify-input-group-item\">\n            <input\n                #localPhoneNumberField\n                class=\"amplify-form-input\"\n                placeholder=\"{{ this.amplifyService.i18n().get(this.getPlaceholder()) }}\"\n                name=\"local_phone_number\"\n                type=\"tel\"\n                (keyup)=\"setLocalPhoneNumber($event.target.value)\"\n                data-test=\"" + auth.genericAttrs.phoneNumberInput + "\"\n            />\n        </div>\n    </div>\n</div>\n";
var PhoneFieldComponentCore = /** @class */ (function () {
    function PhoneFieldComponentCore(amplifyService) {
        this.amplifyService = amplifyService;
        this._placeholder = '';
        this._label = 'Phone Number';
        this._required = true;
        this._country_code = '1';
        this._local_phone_number = '';
        this.phoneFieldChanged = new EventEmitter();
        this._countries = countrylist;
    }
    Object.defineProperty(PhoneFieldComponentCore.prototype, "data", {
        set: function (data) {
            this._placeholder = data.placeholder || this._placeholder;
            this._label = data.label || this._label;
            this._country_code = data.defaultCountryCode || this._country_code;
            this._required =
                data.required === undefined ? this._required : data.required;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneFieldComponentCore.prototype, "placeholder", {
        set: function (placeholder) {
            this._placeholder = placeholder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneFieldComponentCore.prototype, "label", {
        set: function (label) {
            this._label = label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneFieldComponentCore.prototype, "required", {
        set: function (required) {
            this._required = required;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneFieldComponentCore.prototype, "defaultCountryCode", {
        set: function (defaultCountryCode) {
            this._country_code = defaultCountryCode;
        },
        enumerable: true,
        configurable: true
    });
    PhoneFieldComponentCore.prototype.ngOnInit = function () { };
    PhoneFieldComponentCore.prototype.ngOnDestroy = function () { };
    PhoneFieldComponentCore.prototype.setCountryCode = function (country_code) {
        this._country_code = country_code;
        this.phoneFieldChanged.emit({
            country_code: this._country_code,
            local_phone_number: this._local_phone_number,
        });
    };
    PhoneFieldComponentCore.prototype.setLocalPhoneNumber = function (local_phone_number) {
        this._local_phone_number = local_phone_number;
        this.phoneFieldChanged.emit({
            country_code: this._country_code,
            local_phone_number: this._local_phone_number,
        });
    };
    PhoneFieldComponentCore.prototype.getPlaceholder = function () {
        return this.amplifyService
            .i18n()
            .get("Enter your phone number" || this._placeholder);
    };
    /** @nocollapse */
    PhoneFieldComponentCore.ctorParameters = function () { return [
        { type: AmplifyService, decorators: [{ type: Inject, args: [AmplifyService,] },] },
    ]; };
    PhoneFieldComponentCore.propDecorators = {
        "data": [{ type: Input },],
        "placeholder": [{ type: Input },],
        "label": [{ type: Input },],
        "required": [{ type: Input },],
        "defaultCountryCode": [{ type: Input },],
        "phoneFieldChanged": [{ type: Output },],
    };
PhoneFieldComponentCore.ɵfac = function PhoneFieldComponentCore_Factory(t) { return new (t || PhoneFieldComponentCore)(ɵngcc0.ɵɵdirectiveInject(AmplifyService)); };
PhoneFieldComponentCore.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PhoneFieldComponentCore, selectors: [["amplify-auth-phone-field-core"]], inputs: { data: "data", placeholder: "placeholder", label: "label", required: "required", defaultCountryCode: "defaultCountryCode" }, outputs: { phoneFieldChanged: "phoneFieldChanged" }, decls: 12, vars: 5, consts: [["for", "localPhoneNumberField", 1, "amplify-input-label"], [4, "ngIf"], [1, "amplify-input-group"], [1, "amplify-input-group-item"], ["name", "countryCode", "data-test", "dial-code-select", 1, "amplify-select-phone-country", 3, "ngModel", "ngModelChange", "change"], ["countryCodeField", ""], [3, "value", 4, "ngFor", "ngForOf"], ["name", "local_phone_number", "type", "tel", "data-test", "phone-number-input", 1, "amplify-form-input", 3, "placeholder", "keyup"], ["localPhoneNumberField", ""], [3, "value"]], template: function PhoneFieldComponentCore_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "label", 0);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵtemplate(3, PhoneFieldComponentCore_span_3_Template, 2, 0, "span", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 2);
        ɵngcc0.ɵɵelementStart(5, "div", 3);
        ɵngcc0.ɵɵelementStart(6, "select", 4, 5);
        ɵngcc0.ɵɵlistener("ngModelChange", function PhoneFieldComponentCore_Template_select_ngModelChange_6_listener($event) { return ctx._country_code = $event; })("change", function PhoneFieldComponentCore_Template_select_change_6_listener($event) { return ctx.setCountryCode($event.target.value); });
        ɵngcc0.ɵɵtemplate(8, PhoneFieldComponentCore_option_8_Template, 2, 2, "option", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "div", 3);
        ɵngcc0.ɵɵelementStart(10, "input", 7, 8);
        ɵngcc0.ɵɵlistener("keyup", function PhoneFieldComponentCore_Template_input_keyup_10_listener($event) { return ctx.setLocalPhoneNumber($event.target.value); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.amplifyService.i18n().get(ctx._label), " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx._required);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngModel", ctx._country_code);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx._countries);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵpropertyInterpolate("placeholder", ctx.amplifyService.i18n().get(ctx.getPlaceholder()));
    } }, directives: [ɵngcc1.NgIf, ɵngcc2.SelectControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgForOf, ɵngcc2.NgSelectOption, ɵngcc2.ɵangular_packages_forms_forms_x], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PhoneFieldComponentCore, [{
        type: Component,
        args: [{
                selector: 'amplify-auth-phone-field-core',
                template: template
            }]
    }], function () { return [{ type: AmplifyService, decorators: [{
                type: Inject,
                args: [AmplifyService]
            }] }]; }, { phoneFieldChanged: [{
            type: Output
        }], data: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], label: [{
            type: Input
        }], required: [{
            type: Input
        }], defaultCountryCode: [{
            type: Input
        }] }); })();
    return PhoneFieldComponentCore;
}());
export { PhoneFieldComponentCore };

//# sourceMappingURL=phone-field.component.core.js.map