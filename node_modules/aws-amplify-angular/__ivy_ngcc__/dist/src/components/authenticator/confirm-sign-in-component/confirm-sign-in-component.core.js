// tslint:disable
/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
// tslint:enable
import { Component, Input, Inject } from '@angular/core';
import { AmplifyService } from '../../../providers/amplify.service';
import { auth } from '../../../assets/data-test-attributes';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ConfirmSignInComponentCore_div_0_div_5_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "label", 14);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "input", 15, 16);
    ɵngcc0.ɵɵlistener("change", function ConfirmSignInComponentCore_div_0_div_5_Template_input_change_3_listener() { ɵngcc0.ɵɵrestoreView(_r5); var _r3 = ɵngcc0.ɵɵreference(4); var ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.setCode(_r3.value); })("keyup", function ConfirmSignInComponentCore_div_0_div_5_Template_input_keyup_3_listener() { ɵngcc0.ɵɵrestoreView(_r5); var _r3 = ɵngcc0.ɵɵreference(4); var ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.setCode(_r3.value); })("keyup.enter", function ConfirmSignInComponentCore_div_0_div_5_Template_input_keyup_enter_3_listener() { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.onConfirm(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.amplifyService.i18n().get("Confirmation Code *"), " ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("placeholder", ctx_r1.amplifyService.i18n().get("Enter your Code"));
} }
function ConfirmSignInComponentCore_div_0_div_14_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵelementStart(1, "div", 18);
    ɵngcc0.ɵɵelementStart(2, "span", 19);
    ɵngcc0.ɵɵtext(3, "\u26A0");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 20);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "a", 21);
    ɵngcc0.ɵɵlistener("click", function ConfirmSignInComponentCore_div_0_div_14_Template_a_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r9); var ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.onAlertClose(); });
    ɵngcc0.ɵɵtext(7, "\u00D7");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.amplifyService.i18n().get(ctx_r2.errorMessage));
} }
function ConfirmSignInComponentCore_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵelementStart(1, "div", 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵelementStart(3, "div", 4);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, ConfirmSignInComponentCore_div_0_div_5_Template, 5, 2, "div", 5);
    ɵngcc0.ɵɵelementStart(6, "div", 6);
    ɵngcc0.ɵɵelementStart(7, "div", 7);
    ɵngcc0.ɵɵelementStart(8, "div", 8);
    ɵngcc0.ɵɵelementStart(9, "a", 9);
    ɵngcc0.ɵɵlistener("click", function ConfirmSignInComponentCore_div_0_Template_a_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onSignIn(); });
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 10);
    ɵngcc0.ɵɵelementStart(12, "button", 11);
    ɵngcc0.ɵɵlistener("click", function ConfirmSignInComponentCore_div_0_Template_button_click_12_listener() { ɵngcc0.ɵɵrestoreView(_r11); var ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onConfirm(); });
    ɵngcc0.ɵɵtext(13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(14, ConfirmSignInComponentCore_div_0_div_14_Template, 8, 1, "div", 12);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.amplifyService.i18n().get("Confirm Sign in"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.shouldHide("SignIn"));
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.amplifyService.i18n().get("Back to Sign in"), " ");
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.amplifyService.i18n().get("Confirm"), "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.errorMessage);
} }
var template = "\n<div class=\"amplify-container\" *ngIf=\"_show\">\n  <div class=\"amplify-form-container\" data-test=\"" + auth.confirmSignIn.section + "\">\n    <div class=\"amplify-form-body\" data-test=\"" + auth.confirmSignIn.bodySection + "\">\n    <div class=\"amplify-form-header\" data-test=\"" + auth.confirmSignIn.headerSection + "\">{{ this.amplifyService.i18n().get('Confirm Sign in') }}</div>\n      <div class=\"amplify-form-row\" *ngIf=\"!shouldHide('SignIn')\">\n        <label class=\"amplify-input-label\" for=\"code\">\n          {{ this.amplifyService.i18n().get('Confirmation Code *') }}\n        </label>\n        <input #code\n          (change)=\"setCode(code.value)\"\n          (keyup)=\"setCode(code.value)\"\n          (keyup.enter)=\"onConfirm()\"\n          class=\"amplify-form-input\"\n          type=\"text\"\n          placeholder=\"{{ this.amplifyService.i18n().get('Enter your Code') }}\"\n          data-test=\"" + auth.confirmSignIn.codeInput + "\"\n        />\n      </div>\n      <div class=\"amplify-form-actions\">\n        <div class=\"amplify-form-cell-left\">\n          <div class=\"amplify-form-actions-left\">\n            <a \n              class=\"amplify-form-link\"\n              (click)=\"onSignIn()\"\n              data-test=\"" + auth.confirmSignIn.backToSignInLink + "\"\n              >\n                {{ this.amplifyService.i18n().get('Back to Sign in') }}\n            </a>\n          </div>\n        </div>\n        <div class=\"amplify-form-cell-right\">\n          <button\n            class=\"amplify-form-button\"\n            data-test=\"" + auth.confirmSignIn.confirmButton + "\"\n            (click)=\"onConfirm()\"\n            >\n              {{ this.amplifyService.i18n().get('Confirm') }}</button>\n        </div>\n      </div>\n      </div>\n  </div>\n  <div class=\"amplify-alert\" *ngIf=\"errorMessage\">\n    <div class=\"amplify-alert-body\">\n      <span class=\"amplify-alert-icon\">&#9888;</span>\n      <div class=\"amplify-alert-message\">{{ this.amplifyService.i18n().get(errorMessage) }}</div>\n      <a class=\"amplify-alert-close\" (click)=\"onAlertClose()\">&times;</a>\n    </div>\n  </div>\n</div>\n";
var ConfirmSignInComponentCore = /** @class */ (function () {
    function ConfirmSignInComponentCore(amplifyService) {
        this.amplifyService = amplifyService;
        this.hide = [];
        this.logger = this.amplifyService.logger('ConfiSignInComponent');
    }
    Object.defineProperty(ConfirmSignInComponentCore.prototype, "data", {
        set: function (data) {
            this.hide = data.hide ? data.hide : this.hide;
            this._authState = data.authState;
            this._show = data.authState.state === 'confirmSignIn';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfirmSignInComponentCore.prototype, "authState", {
        set: function (authState) {
            this._authState = authState;
            this._show = authState.state === 'confirmSignIn';
        },
        enumerable: true,
        configurable: true
    });
    ConfirmSignInComponentCore.prototype.ngOnInit = function () {
        if (!this.amplifyService.auth()) {
            throw new Error('Auth module not registered on AmplifyService provider');
        }
    };
    ConfirmSignInComponentCore.prototype.shouldHide = function (comp) {
        return this.hide.filter(function (item) { return item === comp; }).length > 0;
    };
    ConfirmSignInComponentCore.prototype.setCode = function (code) {
        this.code = code;
    };
    ConfirmSignInComponentCore.prototype.onConfirm = function () {
        var _this = this;
        var user = this._authState.user;
        var challengeName = user.challengeName;
        var mfaType = challengeName === 'SOFTWARE_TOKEN_MFA' ? challengeName : null;
        this.amplifyService
            .auth()
            .confirmSignIn(user, this.code, mfaType)
            .then(function () {
            _this.onAlertClose();
            _this.amplifyService.setAuthState({ state: 'signedIn', user: user });
        })
            .catch(function (err) { return _this._setError(err); });
    };
    ConfirmSignInComponentCore.prototype.onSignIn = function () {
        this.onAlertClose();
        this.amplifyService.setAuthState({ state: 'signIn', user: null });
    };
    ConfirmSignInComponentCore.prototype.onAlertClose = function () {
        this._setError(null);
    };
    ConfirmSignInComponentCore.prototype._setError = function (err) {
        if (!err) {
            this.errorMessage = null;
            return;
        }
        this.errorMessage = err.message || err;
    };
    /** @nocollapse */
    ConfirmSignInComponentCore.ctorParameters = function () { return [
        { type: AmplifyService, decorators: [{ type: Inject, args: [AmplifyService,] },] },
    ]; };
    ConfirmSignInComponentCore.propDecorators = {
        "data": [{ type: Input },],
        "authState": [{ type: Input },],
        "hide": [{ type: Input },],
    };
ConfirmSignInComponentCore.ɵfac = function ConfirmSignInComponentCore_Factory(t) { return new (t || ConfirmSignInComponentCore)(ɵngcc0.ɵɵdirectiveInject(AmplifyService)); };
ConfirmSignInComponentCore.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ConfirmSignInComponentCore, selectors: [["amplify-auth-confirm-sign-in-core"]], inputs: { hide: "hide", data: "data", authState: "authState" }, decls: 1, vars: 1, consts: [["class", "amplify-container", 4, "ngIf"], [1, "amplify-container"], ["data-test", "confirm-sign-in-section", 1, "amplify-form-container"], ["data-test", "confirm-sign-in-body-section", 1, "amplify-form-body"], ["data-test", "confirm-sign-in-header-section", 1, "amplify-form-header"], ["class", "amplify-form-row", 4, "ngIf"], [1, "amplify-form-actions"], [1, "amplify-form-cell-left"], [1, "amplify-form-actions-left"], ["data-test", "confirm-sign-in-back-to-sign-in-link", 1, "amplify-form-link", 3, "click"], [1, "amplify-form-cell-right"], ["data-test", "confirm-sign-in-confirm-button", 1, "amplify-form-button", 3, "click"], ["class", "amplify-alert", 4, "ngIf"], [1, "amplify-form-row"], ["for", "code", 1, "amplify-input-label"], ["type", "text", "data-test", "confirm-sign-in-code-input", 1, "amplify-form-input", 3, "placeholder", "change", "keyup", "keyup.enter"], ["code", ""], [1, "amplify-alert"], [1, "amplify-alert-body"], [1, "amplify-alert-icon"], [1, "amplify-alert-message"], [1, "amplify-alert-close", 3, "click"]], template: function ConfirmSignInComponentCore_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ConfirmSignInComponentCore_div_0_Template, 15, 5, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx._show);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfirmSignInComponentCore, [{
        type: Component,
        args: [{
                selector: 'amplify-auth-confirm-sign-in-core',
                template: template
            }]
    }], function () { return [{ type: AmplifyService, decorators: [{
                type: Inject,
                args: [AmplifyService]
            }] }]; }, { hide: [{
            type: Input
        }], data: [{
            type: Input
        }], authState: [{
            type: Input
        }] }); })();
    return ConfirmSignInComponentCore;
}());
export { ConfirmSignInComponentCore };

//# sourceMappingURL=confirm-sign-in-component.core.js.map